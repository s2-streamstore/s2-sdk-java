/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.app;

import s2.services.Client;
import s2.v1alpha.*;

import java.util.List;
import java.util.Optional;

/**
 * Sample application demonstrating the usage of S2 Java SDK. Shows how to:
 *  1. Configure and create an S2 client
 *  2. Use account-level operations (listing/creating basins)
 *  3. Use basin-level operations (managing streams)
 *  4. Use stream operations (appending/reading records)
 */
public class App {
  private static final String ENV_S2_HOST = "S2_HOST";
  private static final String ENV_S2_PORT = "S2_PORT";
  private static final String ENV_S2_TOKEN = "S2_TOKEN";

  private static final String DEFAULT_HOST = "aws.s2.dev";
  private static final int DEFAULT_PORT = 443;

  public static void main(String[] args) {
    // Read configuration from environment variables
    var host = Optional.ofNullable(System.getenv(ENV_S2_HOST)).orElse(DEFAULT_HOST);
    var port = Optional.ofNullable(System.getenv(ENV_S2_PORT)).map(Integer::parseInt).orElse(DEFAULT_PORT);
    var token = System.getenv(ENV_S2_TOKEN);

    // Create the S2 client
    try (var client = Client.newBuilder().host(host).port(port).bearerToken(token).build()) {

      // List all basins using the account service
      System.out.println("Listing all basins:");
      var basins = client.account().listBasins("");
      basins.forEach(
          basin -> System.out.printf("Basin: %s (state: %s)%n", basin.getName(), basin.getState()));

      // Create a new basin with default configuration
      var basinName = "twelvehart-demo-java";
      if (basins.stream().anyMatch(b -> b.getName().equals(basinName))) {
        System.out.printf("Basin %s already exists. Skipping creation.%n", basinName);
      } else {
        var basinConfig = BasinConfig.newBuilder().setDefaultStreamConfig(
            StreamConfig.newBuilder().setStorageClass(StorageClass.STORAGE_CLASS_STANDARD).build())
            .build();

        System.out.printf("%nCreating basin: %s%n", basinName);
        var newBasin = client.account().createBasin(basinName, basinConfig);
        System.out.printf("Basin created: %s (state: %s)%n", newBasin.getName(),
            newBasin.getState());
      }

      // Switch to the basin before performing basin-specific operations
      client.useBasin(basinName);

      // Create a stream using the basin service
      var streamName = "demo-stream-java";
      var streamConfig =
          StreamConfig.newBuilder().setStorageClass(StorageClass.STORAGE_CLASS_STANDARD).build();

      System.out.printf("%nCreating stream: %s%n", streamName);
      var newStream = client.basin().createStream(streamName, streamConfig);
      System.out.printf("Stream created: %s%n", newStream.getName());

      // List streams in the basin
      System.out.printf("%nListing streams in basin %s:%n", basinName);
      var streams = client.basin().listStreams("");
      streams.forEach(stream -> System.out.printf("Stream: %s%n", stream.getName()));

      // Append some records using the synchronous stream service
      var record = AppendRecord.newBuilder()
          .setBody(com.google.protobuf.ByteString.copyFromUtf8("Hello, S2!")).build();

      System.out.printf("%nAppending record to stream: %s%n", streamName);
      var appendOutput = client.stream().append(streamName, List.of(record));
      System.out.printf("Record appended. Sequence numbers: %d to %d%n",
          appendOutput.getStartSeqNum(), appendOutput.getEndSeqNum());

      // Read the records back
      System.out.printf("%nReading records from stream: %s%n", streamName);
      var readOutput = client.stream().read(streamName, 0, null);
      if (readOutput.hasBatch()) {
        readOutput.getBatch().getRecordsList().forEach(
            r -> System.out.printf("Record %d: %s%n", r.getSeqNum(), r.getBody().toStringUtf8()));
      }

      // Demonstrate async stream operations
      System.out.printf("%nDemonstrating async append:%n");
      client.streamAsync().appendAsync(streamName, List.of(record))
          .thenAccept(
              output -> System.out.printf("Async append completed. Sequence numbers: %d to %d%n",
                  output.getStartSeqNum(), output.getEndSeqNum()))
          .get(); // Wait for completion in this example

      // Clean up
      System.out.printf("%nCleaning up...%n");
      client.basin().deleteStream(streamName);
      client.account().deleteBasin(basinName);
      System.out.println("Done!");

    } catch (Exception e) {
      System.err.println("Error: " + e.getMessage());
      e.printStackTrace();
      System.exit(1);
    }
  }
}
